* Introduction to Game Design and Prototyping

** Assignment description

   Please read the assignment description, where additional information is
   provided.

** Clarification

   You need to clarify $1. At the moment I can not understand what you mean.$0

** Grade mail

   Hi `(work-student-name-from-heading)`,

   Here's your grade and feedback from the written assignment in Introduction to
   Game Design and Prototyping. Feel free to e-mail me with any questions.

* blog
** Section
   #+BEGIN_section
   $0
   #+END_section
** Article
   #+BEGIN_article
   $0
   #+END_article



* Category 1

** Snippet title

    Here's a text snippet I want to insert.

** Snippet with keybinding                               :last:tag:is:key:o:

    And here's another snippet. This snippet has tags, and the last of these
    tags should be a key. This will bind the snippet to the key (in this case
    "o") when first calling yankpad-map.

** expandword: Snippet with keyword expansion

    This snippet has a keyword; "expandword" in this case. If this category is
    active, and you type the keyword into a buffer and use the "yankpad-expand"
    command, the keyword will be replaced with this snippet.

** more:expands: Multiple keywords

    A snippet can have more than one keyword. This has both "more" and
    "expands".

* Category 2

  Descriptive lists will be treated as snippets. You can set them to be treated
  as =abbrev-mode= abbrevs instead, by setting
  =yankpad-descriptive-list-treatment= to abbrev. If a heading could be
  considered to be a snippet, add the =snippetlist= tag to ignore the snippet
  and scan it for descriptive lists instead.

  - name :: Erik Sjöstrand
  - key :: Typing "key" followed by `yankpad-expand' will insert this snippet.

** Descriptive list example 2                  :snippetlist:

   This heading would normally be considered a snippet, but because of the
   =:snippetlist:= tag, it is scanned for descriptive lists instead.

   - foo :: bar

** Explaining categories

    This snippet belongs to another category (named =Category 2=). Categories
    are useful if you need several yankpads, for instance if you're a teacher
    (like me) working with different courses.

** yasnippet magic

    If you have yasnippet installed (not a requirement), the content in each
    snippet is actually executed by yasnippet! This means that you could run
    elisp inside your snippets: `(+ 3 4)` and have handy tab stop fields.

    | Student | Grade |
    |---------+-------|
    | $1      | $2    |

    That's pretty handy!
    $0

** [[file:my_other_snippets.org]]

   If a heading has a link to another org-file, that file will be scanned for
   snippets. Those snippets are then appended to the category.

** [[file:misc_snippets::*Search]]

   You can specify a specific headline in another file, which you want to be
   searched for snippets. It could be a single snippet, or it could have
   subtrees (in which case all of them will be considered as snippets).

** [[id:38e4c8d2-5ab0-4e78-8e43-ea4a918e5c02]]

   You can also provide the ID of a specific org-mode headline.

** Code snippet examples

    You can organize your snippets inside a category by using subtrees, like
    this one. Only headings without children are considered as snippets.

*** "Litterate programming" snippet                    :src:

     Tagging a snippet with src says that only the content of source blocks
     should be expanded. All other text (like this paragraph) is ignored.

     #+BEGIN_SRC emacs-lisp
     (message "This is part of the snippet")
     #+END_SRC

     If you have several source blocks, their content will be concatenated.

     #+BEGIN_SRC emacs-lisp
     (message "This is also part of the snippet!!!")
     #+END_SRC

*** The source block below will be executed if tag is func :func:
     #+BEGIN_SRC emacs-lisp
     ;; Instead of a src-block, the snippet may be named
     ;; the same as an emacs-lisp function. This will then
     ;; be executed without arguments (see next example).
     (elfeed)
     #+END_SRC

** elfeed                                            :func:e:

* Category 3
  :PROPERTIES:
  :INCLUDE:  Category 1|Category 2
  :END:
** A snippet among many!
   This category will include snippets from Category 1 and Category 2.
   This is done by setting the INCLUDE property of the category.

* Kitchen sink category
:PROPERTIES:
:INCLUDE:  Category 1|Category 2
:END:

** Include other categories

Snippets from Category 1 and Category 2 will be appended to this category.
This is done by setting the INCLUDE property of the category. Categories
are separated by a pipe.

* org-mode

** major: Major-mode categories                                       :major:

    If you have a category with the same name as a major-mode, that category will be
    activated when switching major-mode. This only affects the local buffer and does
    not modify the global category.

** ytb: Yesterday / Today / Blocker                                     :ytb:

 *** `(format-time-string "%Y-%m-%d %A" (current-time))`  
 **** YTB
     #+BEGIN_EXAMPLE
     Y: $0
     T:
     B:
     #+END_EXAMPLE
 **** LOG
 ***** $0

* my-projectile-project

** Projectile based categories

    If you have projectile installed (not a requirement) you can give a category
    the same name as one of your projectile projects. That category will be
    activated when using projectile-find-file on a file in the project.

* python-mode
** for                                      :f:
   for $1 in $2:
       $3
       $0
** main                                     :m:
   if __name__ == '__main__':
       $0

* Global category                                                    :global:
** Always available

    Snippets in a category with the :global: tag are always available for
    expansion.

* Default                                           :global:
** Fallback for major-mode categories

   If you open a file, but have no category named after its major-mode, a
   category named "Default" will be used instead (if you have it defined in your
   Yankpad). It is probably a good idea to make this category global. You can
   change the name of the default category by setting the variable
   yankpad-default-category.






* emacs-lisp-mode
** newf: New elisp file
   ;;; `(buffer-name)` --- $1 -*- lexical-binding: t; -*-
   
   ;;; Commentary:
   ;;; Code:
   $0
   
   (provide '`(file-name-base (buffer-name))`)
   ;;; `(buffer-name)` ends here

** Simple string replacements                                   :snippetlist:
   - wtf :: ¯\_(ツ)_/¯

** Copy images      :func:
   #+BEGIN_SRC emacs-lisp
     (copy-directory "~/blog/org/images" "~/blog/published/images")
   #+END_SRC
   
** Insert number of blogposts    :results:
   #+BEGIN_SRC emacs-lisp
     (length (directory-files "/home/undx/Dropbox/Notes/"));) nil "\\.org"))
   #+END_SRC




